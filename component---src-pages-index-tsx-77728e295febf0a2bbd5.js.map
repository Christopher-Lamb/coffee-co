{"version":3,"file":"component---src-pages-index-tsx-77728e295febf0a2bbd5.js","mappings":"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","sources":["webpack://my-gatsby-site/./src/pages/index.tsx","webpack://my-gatsby-site/./src/utils/queryFunctions.ts"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport type { HeadFC, PageProps } from \"gatsby\";\nimport { BestDisplay, Navbar, Image, SearchBar, FilterBox, CoffeeDisplay, Pagination } from \"../components\";\nimport { MdClear } from \"react-icons/md\";\nimport { Coffees } from \"../utils/coffees\";\nimport { useCoffeeContext } from \"../context/CoffeeContext\";\nimport { clearSpecificSearchParameters, parseQueryStringToArray } from \"../utils/queryFunctions\";\nimport { arrayToSearchQuery } from \"../utils/searchFunction\";\nimport { getSearchParam, setSearchParam } from \"../utils/searchParameters\";\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const [hasFilter, setHasFilter] = useState(false);\n  const { displayedCoffees, setQuery, setPage, pageNum, setSearch } = useCoffeeContext();\n  if (typeof document !== \"undefined\") document.documentElement.className = \"beans\";\n\n  useEffect(() => {\n    handleFilter();\n    // Reading the page attribute from the search parameter in the url\n    const page = getSearchParam(\"page\");\n\n    // If it exists we will set the context of page\n    if (page && setPage) {\n      setPage(parseInt(page));\n    }\n\n    // If it doesnt exist initialize it\n    if (!page) setSearchParam(\"page\", \"0\", true);\n  }, []);\n\n  const handleFilter = () => {\n    // Every time we want to trigger a filter event\n\n    // We are rendering the filter clear based on the number of search parameters in the url\n    const { size } = new URLSearchParams(window.location.search);\n    if (size <= 2) {\n      setHasFilter(false);\n    } else {\n      setHasFilter(true);\n    }\n\n    // Getting search parameters and turning it into an array and removing the page parameter\n    const queryArr = parseQueryStringToArray(window.location.search);\n    // Instead of exclusive filter we should use an inclusive filter\n    const limitedQueryArr = queryArr.filter(([key, _]) => ![\"page\", \"search\"].includes(key));\n\n    // Creating our special query for context\n    const query = arrayToSearchQuery(limitedQueryArr);\n    // Sending it to the context\n    if (setQuery) setQuery(query);\n  };\n\n  const handleClearFilter = () => {\n    //Only clears the paramters we want to â‰ˆ Leaving page attr\n    clearSpecificSearchParameters(\"price\", \"roast\", \"origin\", \"rating\", \"weight\");\n    handleFilter();\n  };\n\n  return (\n    <main>\n      <Navbar />\n      <div className=\"relative w-full\">\n        <Image fileName=\"hero1920.png\" className=\"hero-bg\" />\n      </div>\n      <BestDisplay />\n      <div className=\"mt-two xl:mt-three flex gap-2xsmall justify-center\">\n        <SearchBar />\n        <div title=\"Filters\">\n          <FilterBox onClose={handleFilter} />\n        </div>\n        {hasFilter && (\n          <div onClick={handleClearFilter} className=\"bg-[#b7b7b7] rounded cursor-pointer flex items-center justify-center w-small\" title=\"Clear Filters\">\n            <MdClear className=\"h-small\" size={\"1.3rem\"} />\n          </div>\n        )}\n      </div>\n      <div className=\"mt-small py-large min-h-four bg-white\">\n        {typeof pageNum === \"number\" && displayedCoffees && displayedCoffees.length !== 0 ? (\n          <Pagination />\n        ) : (\n          <a\n            onClick={() => {\n              handleClearFilter();\n              setSearch && setSearch(\"\");\n            }}\n            className=\"cursor-pointer\"\n          >\n            <p className=\"text-center px-small text-med text-slate-800\">\n              <span className=\"font-bold\">Oops!</span> No Coffees here...\n            </p>\n          </a>\n        )}\n\n        <div className=\"flex flex-wrap my-small max-w-five mx-auto justify-center gap-4\">\n          {displayedCoffees?.map((coffee, i) => (\n            <CoffeeWrapper key={i}>\n              <CoffeeDisplay {...coffee} />\n            </CoffeeWrapper>\n          ))}\n        </div>\n        {typeof pageNum === \"number\" && displayedCoffees && displayedCoffees.length > 5 && <Pagination />}\n      </div>\n      <div className=\"mt-three\"></div>\n      <div className=\"mt-three\"></div>\n    </main>\n  );\n};\n\ninterface CoffeeWrapperProps {\n  children?: React.ReactNode;\n}\n\nconst CoffeeWrapper: React.FC<CoffeeWrapperProps> = ({ children }) => {\n  return <div className=\"w-two p-3xsmall border bg-[#f7f7f7]\">{children}</div>;\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Coffee Co.</title>;\n","export function clearSpecificSearchParameters(...keys: string[]) {\n  const params = new URLSearchParams(window.location.search);\n\n  // Remove specified parameters\n  keys.forEach((key) => params.delete(key));\n\n  // Update the browser's URL without reloading the page\n  window.history.replaceState({}, \"\", `${window.location.pathname}?${params.toString()}`);\n}\n\ninterface Coffee {\n  rating: number;\n  name: string;\n  roast: string;\n  filename: string;\n  origin: string;\n  notes: string[];\n  price: number;\n  weight: number;\n}\n\n// Create a lookup object using the keyof OmitCoffee type\nconst omitCoffeeKeys: { [key in keyof OmitCoffee]: true } = {\n  rating: true,\n  name: true,\n  roast: true,\n  origin: true,\n  filename: true,\n  price: true,\n  weight: true,\n};\n\ntype OmitCoffee = Omit<Coffee, \"notes\">;\n\n// Function to parse the query string into an array\nexport function parseQueryStringToArray(search: string): [string, string][] {\n  // Remove the leading '?' if present\n  if (search.startsWith(\"?\")) {\n    search = search.substring(1);\n  }\n\n  // Split the query string into individual parameters\n  const queries = search.split(\"&\");\n\n  // Map each parameter into an array of key-value pairs\n  const result: [keyof OmitCoffee, string][] = [];\n\n  // Iterate through queries and check for valid keys\n  queries.forEach((query) => {\n    const [key, value] = query.split(\"=\");\n    const decodedKey = decodeURIComponent(key);\n    const decodedValue = decodeURIComponent(value || \"\");\n\n    // Check if the decodedKey is in omitCoffeeKeys\n    if (decodedKey in omitCoffeeKeys) {\n    }\n    result.push([decodedKey as keyof OmitCoffee, decodedValue]);\n  });\n\n  return result;\n}\n"],"names":["CoffeeWrapper","_ref2","children","React","className","IndexPage","hasFilter","setHasFilter","useState","displayedCoffees","setQuery","setPage","pageNum","setSearch","useCoffeeContext","document","documentElement","useEffect","handleFilter","page","getSearchParam","parseInt","setSearchParam","size","URLSearchParams","window","location","search","queryArr","startsWith","substring","queries","split","result","forEach","query","key","value","decodedKey","decodeURIComponent","decodedValue","push","parseQueryStringToArray","limitedQueryArr","filter","_ref","_","includes","arrayToSearchQuery","handleClearFilter","params","_len","arguments","length","keys","Array","_key","delete","history","replaceState","pathname","toString","clearSpecificSearchParameters","Navbar","Image","fileName","BestDisplay","SearchBar","title","FilterBox","onClose","onClick","MdClear","Pagination","map","coffee","i","CoffeeDisplay","Head"],"sourceRoot":""}